name: "Generate groups"
description: "Generate groups"
inputs:
  # Required for the sismo hub to work on AWS
  aws-access-key-id:
    required: true
    description: "The aws-access-key-id used to authenticate with AWS"
  aws-secret-access-key:
    required: true
    description: "The aws-secret-access-key used to authenticate with AWS"
  role-to-assume:
    required: true
    description: "The role-to-assume used with AWS"
  sh-s3-data-bucket-name:
    required: true
    description: "The bucket that contains sismo hub data (groups, merkle trees, etc.)"
  sh-s3-data-endpoint:
    required: true
    description: "the endpoint of the sismo hub data s3"
  sh-dynamodb-global-table-name:
    required: true
    description: "the dynamodb global table name"
  sh-default-configuration-env:
    required: true
    description: "the endpoint of the sismo hub data s3"

  # Required to generate the groups
  sh-additional-data:
    required: false
    description: "additional data to inject in groups for staging environnement"
  sh-generate-groups-frequency:
    required: false
    description: "select group generator frequency"
  sh-first-generation-only:
    required: false
    description: "generate only groups for the first time"
  sh-last-generation-time-interval:
    required: false
    description: "skip generation if the last generation is more recent than this duration (12h by default)"
  sh-group-generator-name:
    required: false
    description: "group generator we want to trigger"
  sh-ignore-resolving-errors:
    required: false
    description: "ignore account errors when resolving"

  # API keys for the data-providers
  json-rpc-url:
    required: true
    description: "url of the JSON RPC endpoint"
  hive-api-key:
    required: true
    description: "api key for Hive.one"
  alchemy-api-key:
    required: true
    description: "app api key for alchemy resolver"
  decentralized-subgraph-api-key:
    required: true
    description: "api key for the decentralized subgraph api"
  google-application-credentials:
    required: true
    description: "google application credentials for bigquery provider"
  discord-webhook:
    required: true
    description: "discord webhook for reporting notification"
  transpose-api-key:
    required: true
    description: "token for the transpose api"
  dune-api-key:
    required: true
    description: "dune analytics api key"
  gitcoin-api-key:
    required: true
    description: "gitcoin api key"
  ankr-api-key:
    required: true
    description: "ankr api key"
  github-token:
    required: true
    description: "token for github provider"
  twitter-api-key:
    required: true
    description: "api key for twitter resolver"
  telegram-api-hash:
    required: true
    description: "telegram api hash for telegram resolver"
  telegram-api-id:
    required: true
    description: "telegram api id for telegram resolver"
  telegram-bot-token:
    required: true
    description: "telegram bot token for telegram resolver"
  telegram-bot-session:
    required: true
    description: "telegram bot session for telegram resolver"
  roci-api-key:
    required: true
    description: "roci api key"

runs:
  using: "composite"
  steps:
    - name: Get yarn cache directory path
      shell: bash
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      shell: bash
      run: |
        yarn install --frozen-lockfile

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: github-action
        aws-region: eu-west-1
        role-duration-seconds: 14400

    - name: generate groups
      shell: bash
      env:
        SH_S3_DATA_BUCKET_NAME: ${{ inputs.sh-s3-data-bucket-name }}
        SH_S3_DATA_ENDPOINT: ${{ inputs.sh-s3-data-endpoint }}
        SH_DYNAMO_GLOBAL_TABLE_NAME: ${{ inputs.sh-dynamodb-global-table-name }}
        SH_DEFAULT_CONFIGURATION_ENV: ${{ inputs.sh-default-configuration-env }}
        SH_ADDITIONAL_DATA: ${{ inputs.sh-additional-data }}
        DECENTRALIZED_SUBGRAPH_API_KEY: ${{ inputs.decentralized-subgraph-api-key }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.google-application-credentials }}
        SH_GENERATE_GROUPS_FREQUENCY: ${{ inputs.sh-generate-groups-frequency }}
        SH_FIRST_GENERATION_ONLY: ${{ inputs.sh-first-generation-only }}
        SH_LAST_GENERATION_TIME_INTERVAL: ${{ inputs.sh-last-generation-time-interval }}
        SH_IGNORE_RESOLVING_ERRORS: ${{ inputs.sh-ignore-resolving-errors }}
        HIVE_API_KEY: ${{ inputs.hive-api-key }}
        TWITTER_API_KEY: ${{ inputs.twitter-api-key }}
        JSON_RPC_URL: ${{ inputs.json-rpc-url }}
        SH_GITHUB_TOKEN: ${{ inputs.github-token }}
        TRANSPOSE_API_KEY: ${{ inputs.transpose-api-key }}
        FARCASTER_API_KEY: ${{ inputs.farcaster-api-key }}
        ALCHEMY_API_KEY: ${{ inputs.alchemy-api-key }}
        DUNE_API_KEY: ${{inputs.dune-api-key}}
        GITCOIN_API_KEY: ${{ inputs.gitcoin-api-key }}
        ANKR_API_KEY: ${{ inputs.ankr-api-key }}
        TELEGRAM_API_HASH: ${{ inputs.telegram-api-hash }}
        TELEGRAM_API_ID: ${{ inputs.telegram-api-id }}
        TELEGRAM_BOT_TOKEN: ${{ inputs.telegram-bot-token }}
        TELEGRAM_BOT_SESSION: ${{ inputs.telegram-bot-session }}
        ROCI_API_KEY: ${{ inputs.roci-api-key }}
      run: |
        if [[ -n "${{ inputs.sh-group-generator-name }}" ]]; then
          yarn generate-group ${{ inputs.sh-group-generator-name }} --storage-type aws 
        else
          yarn cli generate-all-groups --storage-type aws 
        fi
