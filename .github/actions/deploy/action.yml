name: "Deploy data-sources"
description: "Build and deploy data-sources to AWS"
inputs:
  aws-access-key-id:
    required: true
    description: "The aws-access-key-id used to authenticate with AWS"
  aws-secret-access-key:
    required: true
    description: "The aws-secret-access-key used to authenticate with AWS"
  role-to-assume:
    required: true
    description: "The role-to-assume used with AWS"
  stage:
    required: true
    description: "The serverless stage"
  static-bucket-name:
    required: true
    description: "The static bucket name to synchronize static files"
  deployment-url:
    required: true
    description: "The api url"
  hive-api-key:
    required: true
    description: "hive api key"
  json-rpc-url:
    required: true
    description: "json rpc url for ens resolution"
  google-application-credentials:
    required: true
    description: "google application credentials for bigquery provider"
  alchemy-api-key:
    required: true
    description: "alchemy app key to use the alchemy API"
  dune-api-key:
    required: true
    description: "dune analytics api key"
  gitcoin-api-key:
    required: true
    description: "gitcoin api key"
  ankr-api-key:
    required: true
    description: "ankr api key"
  github-token:
    required: true
    description: "github token"    
  twitter-api-key:
    required: true
    description: "api key for twitter resolver"    
  telegram-api-hash:
    required: true
    description: "telegram api hash for telegram resolver"
  telegram-api-id:
    required: true
    description: "telegram api id for telegram resolver"
  telegram-bot-token:
    required: true
    description: "telegram bot token for telegram resolver"
  telegram-bot-session:
    required: true
    description: "telegram bot session for telegram resolver"

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        yarn install --frozen-lockfile

    - name: Generate OpenApi Schema
      shell: bash
      run: |
        npx ts-node src/cli/cli.ts generate-openapi > static/api.json

    - name: Configure rapidoc schema location
      shell: bash
      run: |
        sed -i 's#../../doc/json#../api.json#' static/rapidoc/index.html

    - name: Configure rapidoc api server
      shell: bash
      run: |
        sed -i 's#server-url="/"#server-url="${{ inputs.deployment-url }}"#' static/rapidoc/index.html

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: github-action
        aws-region: eu-west-1
        role-duration-seconds: 900

    - name: Sync s3 static
      shell: bash
      run: |
        aws s3 sync ./static s3://${{ inputs.static-bucket-name }}

    - name: sls deploy
      shell: bash
      env:
        HIVE_API_KEY: ${{ inputs.hive-api-key }}
        ALCHEMY_API_KEY: ${{ inputs.alchemy-api-key }}
        JSON_RPC_URL: ${{ inputs.json-rpc-url }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.google-application-credentials }}
        DUNE_API_KEY: ${{ inputs.dune-api-key }}
        GITCOIN_API_KEY: ${{ inputs.gitcoin-api-key }}
        ANKR_API_KEY: ${{ inputs.ankr-api-key }}
        SH_GITHUB_TOKEN: ${{ inputs.github-token }}
        TWITTER_API_KEY: ${{ inputs.twitter-api-key }}
        TELEGRAM_API_HASH: ${{ inputs.telegram-api-hash }}
        TELEGRAM_API_ID: ${{ inputs.telegram-api-id }}
        TELEGRAM_BOT_TOKEN: ${{ inputs.telegram-bot-token }}
        TELEGRAM_BOT_SESSION: ${{ inputs.telegram-bot-session }}        
      run: |
        npx serverless deploy --stage ${{ inputs.stage }}
