name: "Delete group"
description: "Delete group"
inputs:
  aws-access-key-id:
    required: true
    description: "The aws-access-key-id used to authenticate with AWS"
  aws-secret-access-key:
    required: true
    description: "The aws-secret-access-key used to authenticate with AWS"
  role-to-assume:
    required: true
    description: "The role-to-assume used with AWS"
  sh-s3-data-bucket-name:
    required: true
    description: "The bucket that contains sismo hub data (groups, merkle trees, etc.)"
  sh-s3-data-endpoint:
    required: true
    description: "the endpoint of the sismo hub data s3"
  sh-dynamodb-global-table-name:
    required: true
    description: "the dynamodb global table name"
  sh-default-configuration-env:
    required: true
    description: "the endpoint of the sismo hub data s3"
  sh-group-name:
    required: true
    description: "group we want to trigger"
  sh-relay-defender-api-keys:
    required: true
    description: "defender relayer roots owner api keys for each chain"
  sh-additional-data:
    required: false
    description: "additional data to inject in groups for staging environnement"
  sh-registry-tree-networks:
    required: false
    description: "networks to send the offchain registry tree"
  sh-attesters:
    required: true
    description: "names of the different attesters"
  sh-attesters-networks:
    required: true
    description: "networks of the attesters"
  sh-additional-params:
    required: false
    description: "additional params for the command"

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        yarn install --frozen-lockfile

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: github-action
        aws-region: eu-west-1
        role-duration-seconds: 7200

    - name: delete group
      shell: bash
      env:
        SH_S3_DATA_BUCKET_NAME: ${{ inputs.sh-s3-data-bucket-name }}
        SH_S3_DATA_ENDPOINT: ${{ inputs.sh-s3-data-endpoint }}
        SH_DYNAMO_GLOBAL_TABLE_NAME: ${{ inputs.sh-dynamodb-global-table-name }}
        SH_DEFAULT_CONFIGURATION_ENV: ${{ inputs.sh-default-configuration-env }}
      run: |
        yarn delete-group ${{ inputs.sh-group-name }} --storage-type aws --logger-type local-file

    - name: make groups available to attester on chain
      shell: bash
      env:
        SH_S3_DATA_BUCKET_NAME: ${{ inputs.sh-s3-data-bucket-name }}
        SH_S3_DATA_ENDPOINT: ${{ inputs.sh-s3-data-endpoint }}
        SH_DYNAMO_GLOBAL_TABLE_NAME: ${{ inputs.sh-dynamodb-global-table-name }}
        SH_DEFAULT_CONFIGURATION_ENV: ${{ inputs.sh-default-configuration-env }}
        SH_RELAY_DEFENDER_API_KEYS: ${{ inputs.sh-relay-defender-api-keys }}
        SH_ADDITIONAL_DATA: ${{ inputs.sh-additional-data }}
      run: |
        for attester in ${{ inputs.sh-attesters }}; do yarn make-groups-available $attester ${{ inputs.sh-attesters-networks }} --storage-type aws --send-on-chain --logger-type local-file ${{ inputs.sh-additional-params }}; done

    - name: make groups available to hydra-s2 registry tree on chain
      shell: bash
      if: ${{ inputs.sh-registry-tree-networks }}
      env:
        SH_S3_DATA_BUCKET_NAME: ${{ inputs.sh-s3-data-bucket-name }}
        SH_S3_DATA_ENDPOINT: ${{ inputs.sh-s3-data-endpoint }}
        SH_DYNAMO_GLOBAL_TABLE_NAME: ${{ inputs.sh-dynamodb-global-table-name }}
        SH_DEFAULT_CONFIGURATION_ENV: ${{ inputs.sh-default-configuration-env }}
        SH_RELAY_DEFENDER_API_KEYS: ${{ inputs.sh-relay-defender-api-keys }}
        SH_ADDITIONAL_DATA: ${{ inputs.sh-additional-data }}
      run: |
        yarn make-groups-available hydra-s2 ${{ inputs.sh-registry-tree-networks }} --storage-type aws --send-on-chain --logger-type local-file ${{ inputs.sh-additional-params }}
