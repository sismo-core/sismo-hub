name: "Update groups"
description: "Update groups and send on-chain"
inputs:
  aws-access-key-id:
    required: true
    description: "The aws-access-key-id used to authenticate with AWS"
  aws-secret-access-key:
    required: true
    description: "The aws-secret-access-key used to authenticate with AWS"
  role-to-assume:
    required: true
    description: "The role-to-assume used with AWS"
  sh-s3-data-bucket-name:
    required: true
    description: "The bucket that contains sismo hub data (groups, merkle trees, etc.)"
  sh-s3-data-endpoint:
    required: true
    description: "the endpoint of the sismo hub data s3"
  sh-dynamodb-global-table-name:
    required: true
    description: "the dynamodb global table name"
  sh-default-configuration-env:
    required: true
    description: "the endpoint of the sismo hub data s3"
  sh-relay-defender-api-key:
    required: true
    description: "defender relayer roots owner api key"
  sh-relay-defender-api-secret:
    required: true
    description: "defender relayer roots owner api secret"
  sh-additional-data:
    required: false
    description: "additional data to inject in groups for staging environnement"
  sh-generate-groups-frequency:
    required: false
    description: "select group generator frequency"
  sh-first-generation-only:
    required: false
    description: "generate only groups for the first time"
  sh-attester-network:
    required: true
    description: "network of the attester"
  hive-api-key:
    required: true
    description: "api key for Hive.one"
  json-rpc-url:
    required: true
    description: "url of the JSON RPC endpoint"

  # data-providers api keys
  decentralized-subgraph-api-key:
    required: true
    description: "api key for the decentralized subgraph api"
  google-application-credentials:
    required: true
    description: "google application credentials for bigquery provider"
  discord-webhook:
    required: true
    description: "discord webhook for reporting notification"


runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        yarn install --frozen-lockfile

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: github-action
        aws-region: eu-west-1
        role-duration-seconds: 1800

    - name: generate groups
      shell: bash
      env:
        SH_S3_DATA_BUCKET_NAME:  ${{ inputs.sh-s3-data-bucket-name }}
        SH_S3_DATA_ENDPOINT:  ${{ inputs.sh-s3-data-endpoint }}
        SH_DYNAMO_GLOBAL_TABLE_NAME:  ${{ inputs.sh-dynamodb-global-table-name }}
        SH_DEFAULT_CONFIGURATION_ENV:  ${{ inputs.sh-default-configuration-env }}
        SH_RELAY_DEFENDER_API_KEY:  ${{ inputs.sh-relay-defender-api-key }}
        SH_RELAY_DEFENDER_API_SECRET:  ${{ inputs.sh-relay-defender-api-secret }}
        SH_ADDITIONAL_DATA: ${{ inputs.sh-additional-data }}
        DECENTRALIZED_SUBGRAPH_API_KEY: ${{ inputs.decentralized-subgraph-api-key }} 
        GOOGLE_APPLICATION_CREDENTIALS:  ${{ inputs.google-application-credentials }}
        SH_GENERATE_GROUPS_FREQUENCY: ${{ inputs.sh-generate-groups-frequency }} 
        SH_FIRST_GENERATION_ONLY: ${{ inputs.sh-first-generation-only }}
        HIVE_API_KEY: ${{ inputs.hive-api-key }}
        JSON_RPC_URL: ${{ inputs.json-rpc-url }}
      run: |
        yarn cli generate-all-groups --storage-type aws --logger-type local-file

    - name: keep only interesting logs
      shell: bash
      run: |
        sed -i '/already generated at/d' log/info.log

    - name: send groups to attester on chain 
      shell: bash
      env:
        SH_S3_DATA_BUCKET_NAME:  ${{ inputs.sh-s3-data-bucket-name }}
        SH_S3_DATA_ENDPOINT:  ${{ inputs.sh-s3-data-endpoint }}
        SH_DYNAMO_GLOBAL_TABLE_NAME:  ${{ inputs.sh-dynamodb-global-table-name }}
        SH_DEFAULT_CONFIGURATION_ENV:  ${{ inputs.sh-default-configuration-env }}
        SH_RELAY_DEFENDER_API_KEY:  ${{ inputs.sh-relay-defender-api-key }}
        SH_RELAY_DEFENDER_API_SECRET:  ${{ inputs.sh-relay-defender-api-secret }}
        SH_ADDITIONAL_DATA: ${{ inputs.sh-additional-data }}
        DECENTRALIZED_SUBGRAPH_API_KEY: ${{ inputs.decentralized-subgraph-api-key }} 
        GOOGLE_APPLICATION_CREDENTIALS:  ${{ inputs.google-application-credentials }}
      run: |
        yarn send-to-attester hydra-s1-simple ${{ inputs.sh-attester-network }} --storage-type aws --send-on-chain --logger-type local-file

    - name: send attester computation reporting to discord
      uses: sinshutu/upload-to-discord@master
      env:
        DISCORD_WEBHOOK: ${{ inputs.discord-webhook }}
      with:
        args: log/info.log
