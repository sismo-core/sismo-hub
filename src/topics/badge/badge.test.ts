import { testBadgesCollection } from "./test-badge";
import { BadgeService } from "topics/badge";
import {
  generateAttestationsRegistryCreateAttributesTx,
  generateAttestationsRegistrySetAttributesTx,
} from "topics/badge/badge.commands";
import { Network } from "topics/registry-tree";

describe("Test badges", () => {
  const badgeServices = new BadgeService([testBadgesCollection], [Network.Local, Network.Test]);

  it("should have empty badges for other network", async () => {
    const badges = badgeServices.getBadges(Network.Mainnet);
    expect(Object.keys(badges)).toHaveLength(0);
  });

  it("should have only badges corresponding to the given network", async () => {
    const badges = badgeServices.getBadges(Network.Local);
    expect(Object.keys(badges)).toHaveLength(2);
    expect(badges[0].collectionId).toBe(1003);
    expect(badges[0].name).toBe("Test Badge 3");
  });

  it("should have badges with valid collectionId", async () => {
    const badges = badgeServices.getBadges(Network.Test);
    expect(Object.keys(badges)).toHaveLength(3);
    expect(badges[0].collectionId).toBe(1001);
    expect(badges[0].name).toBe("Test Badge");
    expect(badges[1].collectionId).toBe(1002);
    expect(badges[1].name).toBe("Test Badge 2");
    expect(badges[2].collectionId).toBe(1004);
    expect(badges[2].name).toBe("Test Badge 4");
  });

  it("should create calldata for creating badges attributes", async () => {
    expect((await generateAttestationsRegistryCreateAttributesTx("1,3")).calldata).toBe(
      "0xb1cb1662000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000025052495641435900000000000000000000000000000000000000000000000000535942494c5f524553495354414e434500000000000000000000000000000000"
    );
  });

  it("should create calldata for setting badges attributes", async () => {
    expect(
      (
        await generateAttestationsRegistrySetAttributesTx(Network.Polygon, {
          collectionIds: "10000004,10000009",
        })
      ).calldata
    ).toBe(
      "0x7cc920b
    );
  });
});
